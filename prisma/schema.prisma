// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  full_name     String?
  avatar_url    String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  notes         Note[]
  study_groups  StudyGroupMember[]
  mindmaps      MindMap[]
  charts        Chart[]
  sessions      Session[]
  app_usage     AppUsage[]
  parent_id     String?   // For parental controls
  children      User[]    @relation("ParentChild", fields: [parent_id], references: [id])
  parent        User?     @relation("ParentChild", fields: [parent_id], references: [id])
}

model StudyGroup {
  id          String    @id @default(uuid())
  name        String
  description String?
  is_private  Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  members     StudyGroupMember[]
  notes       Note[]
  sessions    Session[]
  messages    GroupMessage[]
  mindmaps    MindMap[]
  charts      Chart[]
}

model StudyGroupMember {
  id        String   @id @default(uuid())
  group_id  String
  user_id   String
  role      String   @default("MEMBER") // OWNER, ADMIN, MEMBER
  created_at DateTime @default(now())
  group     StudyGroup @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([group_id, user_id])
}

model Note {
  id          String    @id @default(uuid())
  title       String
  content     String
  user_id     String
  group_id    String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group       StudyGroup? @relation(fields: [group_id], references: [id], onDelete: Cascade)
  mindmaps    MindMap[]
  charts      Chart[]
}

model Session {
  id          String    @id @default(uuid())
  title       String
  description String?
  start_time  DateTime
  end_time    DateTime?
  user_id     String
  group_id    String
  created_at  DateTime  @default(now())
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group       StudyGroup @relation(fields: [group_id], references: [id], onDelete: Cascade)
}

model GroupMessage {
  id          String    @id @default(uuid())
  content     String
  user_id     String
  group_id    String
  created_at  DateTime  @default(now())
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group       StudyGroup @relation(fields: [group_id], references: [id], onDelete: Cascade)
}

model AppUsage {
  id          String    @id @default(uuid())
  user_id     String
  app_name    String
  start_time  DateTime
  end_time    DateTime?
  created_at  DateTime  @default(now())
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model MindMap {
  id          String    @id @default(uuid())
  title       String
  content     Json      // Stores the mindmap structure
  user_id     String
  group_id    String?
  note_id     String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group       StudyGroup? @relation(fields: [group_id], references: [id], onDelete: Cascade)
  note        Note?     @relation(fields: [note_id], references: [id], onDelete: Cascade)
}

model Chart {
  id          String    @id @default(uuid())
  title       String
  type        String    // e.g., "bar", "line", "pie", "flowchart"
  content     Json      // Stores the chart data and configuration
  user_id     String
  group_id    String?
  note_id     String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group       StudyGroup? @relation(fields: [group_id], references: [id], onDelete: Cascade)
  note        Note?     @relation(fields: [note_id], references: [id], onDelete: Cascade)
} 